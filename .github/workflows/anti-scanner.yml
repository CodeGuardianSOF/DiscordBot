name: Anti Code Scanner

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-languages:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect.outputs.languages }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Linguist
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full
        sudo gem install github-linguist

    - name: Detect languages
      id: detect
      run: |
        languages=$(github-linguist --breakdown | awk 'BEGIN { FS=": " } /^ {2}[A-Za-z]+: / { print $1 }' | sed 's/^ *//g' | paste -sd "," -)
        echo "Detected languages: $languages"
        echo "::set-output name=languages::$languages"

  lint:
    needs: detect-languages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js environment
      if: contains(needs.detect-languages.outputs.languages, 'JavaScript')
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Run ESLint
      if: contains(needs.detect-languages.outputs.languages, 'JavaScript')
      run: |
        if [ -f package.json ]; then
          npm install
          npm install eslint
          npx eslint . | tee eslint-report.txt
          eslint_failed=$?
          if [ $eslint_failed -ne 0 ]; then
            echo "::error file=eslint-report.txt::ESLint found issues"
          fi
        else
          echo "No package.json found, skipping npm install and eslint."
        fi

    - name: Set up Python environment
      if: contains(needs.detect-languages.outputs.languages, 'Python')
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Run Bandit
      if: contains(needs.detect-languages.outputs.languages, 'Python')
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install bandit
        bandit -r . | tee bandit-report.txt
        bandit_failed=$?
        if [ $bandit_failed -ne 0 ]; then
          echo "::error file=bandit-report.txt::Bandit found issues"
        fi

    - name: Install ShellCheck
      if: contains(needs.detect-languages.outputs.languages, 'Shell')
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Run ShellCheck
      if: contains(needs.detect-languages.outputs.languages, 'Shell')
      run: |
        shellcheck **/*.sh | tee shellcheck-report.txt || true
        shellcheck_failed=$?
        if [ $shellcheck_failed -ne 0 ]; then
          echo "::error file=shellcheck-report.txt::ShellCheck found issues"
        fi

    - name: Install YAMLLint
      if: contains(needs.detect-languages.outputs.languages, 'YAML')
      run: |
        sudo apt-get update
        sudo apt-get install -y yamllint

    - name: Run YAMLLint
      if: contains(needs.detect-languages.outputs.languages, 'YAML')
      run: |
        yamllint . | tee yamllint-report.txt
        yamllint_failed=$?
        if [ $yamllint_failed -ne 0 ]; then
          echo "::error file=yamllint-report.txt::YAMLLint found issues"
        fi

    - name: Set up Go environment
      if: contains(needs.detect-languages.outputs.languages, 'Go')
      uses: actions/setup-go@v4
      with:
        go-version: '1.16'

    - name: Run GoLint
      if: contains(needs.detect-languages.outputs.languages, 'Go')
      run: |
        go install golang.org/x/lint/golint@latest
        golint ./... | tee golint-report.txt
        golint_failed=$?
        if [ $golint_failed -ne 0 ]; then
          echo "::error file=golint-report.txt::GoLint found issues"
        fi

    - name: Set up Java environment
      if: contains(needs.detect-languages.outputs.languages, 'Java')
      uses: actions/setup-java@v3
      with:
        java-version: '11'

    - name: Run Checkstyle
      if: contains(needs.detect-languages.outputs.languages, 'Java')
      run: |
        curl -LJO https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.41.1/checkstyle-8.41.1-all.jar
        java -jar checkstyle-8.41.1-all.jar -c /google_checks.xml src | tee checkstyle-report.txt
        checkstyle_failed=$?
        if [ $checkstyle_failed -ne 0 ]; then
          echo "::error file=checkstyle-report.txt::Checkstyle found issues"
        fi

    - name: Set up PHP environment
      if: contains(needs.detect-languages.outputs.languages, 'PHP')
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'

    - name: Run PHPCS
      if: contains(needs.detect-languages.outputs.languages, 'PHP')
      run: |
        composer global require "squizlabs/php_codesniffer=*"
        ~/.composer/vendor/bin/phpcs --standard=PSR2 src/ | tee phpcs-report.txt
        phpcs_failed=$?
        if [ $phpcs_failed -ne 0 ]; then
          echo "::error file=phpcs-report.txt::PHPCS found issues"
        fi

    - name: Set up Ruby environment
      if: contains(needs.detect-languages.outputs.languages, 'Ruby')
      uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.7'

    - name: Run RuboCop
      if: contains(needs.detect-languages.outputs.languages, 'Ruby')
      run: |
        gem install rubocop
        rubocop | tee rubocop-report.txt
        rubocop_failed=$?
        if [ $rubocop_failed -ne 0 ]; then
          echo "::error file=rubocop-report.txt::RuboCop found issues"
        fi

    - name: Set up .NET environment
      if: contains(needs.detect-languages.outputs.languages, 'C#')
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '5.0.x'

    - name: Run Dotnet Format
      if: contains(needs.detect-languages.outputs.languages, 'C#')
      run: |
        dotnet tool install -g dotnet-format
        dotnet format | tee dotnet-format-report.txt
        dotnet_format_failed=$?
        if [ $dotnet_format_failed -ne 0 ]; then
          echo "::error file=dotnet-format-report.txt::Dotnet Format found issues"
        fi

    - name: Set up Rust environment
      if: contains(needs.detect-languages.outputs.languages, 'Rust')
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Run Clippy
      if: contains(needs.detect-languages.outputs.languages, 'Rust')
      run: |
        rustup component add clippy
        cargo clippy --all-targets --all-features -- -D warnings | tee clippy-report.txt
        clippy_failed=$?
        if [ $clippy_failed -ne 0 ]; then
          echo "::error file=clippy-report.txt::Clippy found issues"
        fi

    - name: Install MarkdownLint
      if: contains(needs.detect-languages.outputs.languages, 'Markdown')
      run: |
        sudo apt-get update
        sudo apt-get install -y npm
        npm install -g markdownlint-cli

    - name: Run MarkdownLint
      if: contains(needs.detect-languages.outputs.languages, 'Markdown')
      run: |
        markdownlint "**/*.md" | tee markdownlint-report.txt
        markdownlint_failed=$?
        if [ $markdownlint_failed -ne 0 ]; then
          echo "::error file=markdownlint-report.txt::MarkdownLint found issues"
        fi

    - name: Check for large log files
      run: |
        find . -name "*.log" -size +1M -exec echo "::error file={}::Log file is larger than 1MB" \;

  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
          npm run coverage
          coverage_failed=$?
          if [ $coverage_failed -ne 0 ]; then
            echo "::error::Code coverage analysis found issues"
          fi
        else
          echo "No package.json found, skipping npm install and coverage."
        fi

  create-pull-request:
    name: Create or Update Pull Request
    runs-on: ubuntu-latest
    needs: [lint, coverage]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Configure git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        commit-message: "Auto-generated update by GitHub Action"
        branch: update-dependencies
        title: "Dependency Update"
        body: "This PR updates dependencies to their latest versions."

  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        else
          echo "No package.json found, skipping npm install."
        fi

    - name: Check for outdated dependencies
      run: |
        if [ -f package.json ]; then
          npm outdated
        else
          echo "No package.json found, skipping npm outdated."
        fi

    - name: Update dependencies
      run: |
        if [ -f package.json ]; then
          npm update
        else
          echo "No package.json found, skipping npm update."
        fi

    - name: Commit and push updates
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout -b update-dependencies
        if [ -f package.json ]; then
          npm install
          npm update
          git commit -am "Update dependencies"
          git push origin update-dependencies
        else
          echo "No package.json found, skipping dependency update commit."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      if: ${{ steps.commit-push.outputs.commit != '' }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Update dependencies"
        branch: update-dependencies
        base: main
        title: "Dependency updates"
        body: "This PR updates the dependencies to their latest versions."
