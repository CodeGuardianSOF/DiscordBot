name: Anti Code Scanner

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint code
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        language: [javascript, python, shell, yaml, go, java, php, ruby, csharp, rust]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup environments
    - name: Set up environment
      run: |
        if [ "${{ matrix.language }}" == "javascript" ]; then
          echo "Setting up Node.js"
          actions/setup-node@v3 node-version=16;
        elif [ "${{ matrix.language }}" == "python" ]; then
          echo "Setting up Python"
          actions/setup-python@v4 python-version=3.9;
        elif [ "${{ matrix.language }}" == "go" ]; then
          echo "Setting up Go"
          actions/setup-go@v4 go-version=1.16;
        elif [ "${{ matrix.language }}" == "java" ]; then
          echo "Setting up Java"
          actions/setup-java@v3 java-version=11;
        elif [ "${{ matrix.language }}" == "php" ]; then
          echo "Setting up PHP"
          shivammathur/setup-php@v2 php-version=7.4;
        elif [ "${{ matrix.language }}" == "ruby" ]; then
          echo "Setting up Ruby"
          actions/setup-ruby@v1 ruby-version=2.7;
        elif [ "${{ matrix.language }}" == "csharp" ]; then
          echo "Setting up .NET"
          actions/setup-dotnet@v3 dotnet-version=5.0.x;
        elif [ "${{ matrix.language }}" == "rust" ]; then
          echo "Setting up Rust"
          actions-rs/toolchain@v1 toolchain=stable;
        fi

    # Install dependencies
    - name: Install dependencies
      run: |
        if [ "${{ matrix.language }}" == "javascript" ]; then
          npm install;
        elif [ "${{ matrix.language }}" == "python" ]; then
          python -m pip install --upgrade pip;
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi;
        fi

    # Install linters
    - name: Install linter
      run: |
        if [ "${{ matrix.language }}" == "javascript" ]; then
          npm install eslint;
        elif [ "${{ matrix.language }}" == "python" ]; then
          pip install bandit;
        elif [ "${{ matrix.language }}" == "shell" ]; then
          sudo apt-get install -y shellcheck;
        elif [ "${{ matrix.language }}" == "yaml" ]; then
          sudo apt-get install -y yamllint;
        elif [ "${{ matrix.language }}" == "go" ]; then
          go install golang.org/x/lint/golint@latest;
        elif [ "${{ matrix.language }}" == "java" ]; then
          curl -LJO https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.41.1/checkstyle-8.41.1-all.jar;
        elif [ "${{ matrix.language }}" == "php" ]; then
          composer global require "squizlabs/php_codesniffer=*";
        elif [ "${{ matrix.language }}" == "ruby" ]; then
          gem install rubocop;
        elif [ "${{ matrix.language }}" == "csharp" ]; then
          dotnet tool install -g dotnet-format;
        elif [ "${{ matrix.language }}" == "rust" ]; then
          rustup component add clippy;
        fi

    # Run linters
    - name: Run linter
      run: |
        if [ "${{ matrix.language }}" == "javascript" ]; then
          npx eslint .;
        elif [ "${{ matrix.language }}" == "python" ]; then
          bandit -r .;
        elif [ "${{ matrix.language }}" == "shell" ]; then
          shellcheck **/*.sh;
        elif [ "${{ matrix.language }}" == "yaml" ]; then
          yamllint .;
        elif [ "${{ matrix.language }}" == "go" ]; then
          golint ./...;
        elif [ "${{ matrix.language }}" == "java" ]; then
          java -jar checkstyle-8.41.1-all.jar -c /google_checks.xml src;
        elif [ "${{ matrix.language }}" == "php" ]; then
          ~/.composer/vendor/bin/phpcs --standard=PSR2 src/;
        elif [ "${{ matrix.language }}" == "ruby" ]; then
          rubocop;
        elif [ "${{ matrix.language }}" == "csharp" ]; then
          dotnet format;
        elif [ "${{ matrix.language }}" == "rust" ]; then
          cargo clippy --all-targets --all-features -- -D warnings;
        fi

  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Run tests and collect coverage
      run: npm run test -- --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy to scan for vulnerabilities
      uses: aquasecurity/trivy-action@v0.2.1
      with:
        scan-type: 'fs'
        ignore-unfixed: true

  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Check for outdated dependencies
      run: npm outdated
