name: Anti Code Scanner

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-languages:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect.outputs.languages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Linguist
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-full
          sudo gem install github-linguist

      - name: Detect languages
        id: detect
        run: |
          languages=$(github-linguist --breakdown | awk 'BEGIN { FS=": " } /^ {2}[A-Za-z]+: / { print $1 }' | sed 's/^ *//g' | paste -sd "," -)
          echo "Detected languages: $languages"
          echo "::set-output name=languages::$languages"

  lint:
    needs: detect-languages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environments and run linters
        run: |
          languages="${{ needs.detect-languages.outputs.languages }}"
          
          if echo "$languages" | grep -q "JavaScript"; then
            echo "Setting up Node.js for JavaScript linting..."
            npm install
            npm install eslint
            npx eslint . -f json -o eslint-report.json || true
          fi
          
          if echo "$languages" | grep -q "Python"; then
            echo "Setting up Python for Bandit linting..."
            python -m pip install --upgrade pip
            [ -f requirements.txt ] && pip install -r requirements.txt
            pip install bandit
            bandit -r . -f json -o bandit-report.json || true
          fi
          
          if echo "$languages" | grep -q "Shell"; then
            echo "Setting up ShellCheck for shell script linting..."
            sudo apt-get update
            sudo apt-get install -y shellcheck
            shellcheck **/*.sh -f json > shellcheck-report.json || true
          fi
          
          if echo "$languages" | grep -q "YAML"; then
            echo "Setting up YAMLLint for YAML linting..."
            sudo apt-get update
            sudo apt-get install -y yamllint
            yamllint . -f parsable -o yamllint-report.json || true
          fi
          
          if echo "$languages" | grep -q "Go"; then
            echo "Setting up GoLint for Go linting..."
            go install golang.org/x/lint/golint@latest
            golint ./... > golint-report.json || true
          fi
          
          if echo "$languages" | grep -q "Java"; then
            echo "Setting up Checkstyle for Java linting..."
            curl -LJO https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.41.1/checkstyle-8.41.1-all.jar
            java -jar checkstyle-8.41.1-all.jar -c /google_checks.xml src -f json -o checkstyle-report.json || true
          fi
          
          if echo "$languages" | grep -q "PHP"; then
            echo "Setting up PHPCS for PHP linting..."
            composer global require "squizlabs/php_codesniffer=*"
            ~/.composer/vendor/bin/phpcs --standard=PSR2 src/ --report=json -o phpcs-report.json || true
          fi
          
          if echo "$languages" | grep -q "Ruby"; then
            echo "Setting up RuboCop for Ruby linting..."
            gem install rubocop
            rubocop --format json --out rubocop-report.json || true
          fi
          
          if echo "$languages" | grep -q "C#"; then
            echo "Setting up Dotnet Format for C# linting..."
            dotnet tool install -g dotnet-format
            dotnet format --report json > dotnet-format-report.json || true
          fi
          
          if echo "$languages" | grep -q "Rust"; then
            echo "Setting up Clippy for Rust linting..."
            rustup component add clippy
            cargo clippy --all-targets --all-features -- -D warnings --message-format=json > clippy-report.json || true
          fi
          
          if echo "$languages" | grep -q "Markdown"; then
            echo "Setting up MarkdownLint for Markdown linting..."
            sudo apt-get update
            sudo apt-get install -y npm
            npm install -g markdownlint-cli
            markdownlint "**/*.md" -f json > markdownlint-report.json || true
          fi

      - name: Upload lint results
        run: |
          languages="${{ needs.detect-languages.outputs.languages }}"

          if echo "$languages" | grep -q "JavaScript"; then
            echo "Uploading ESLint results..."
            echo "::set-output name=sarif_file::eslint-report.json"
          fi
          
          if echo "$languages" | grep -q "Python"; then
            echo "Uploading Bandit results..."
            echo "::set-output name=sarif_file::bandit-report.json"
          fi
          
          if echo "$languages" | grep -q "Shell"; then
            echo "Uploading ShellCheck results..."
            echo "::set-output name=sarif_file::shellcheck-report.json"
          fi
          
          if echo "$languages" | grep -q "YAML"; then
            echo "Uploading YAMLLint results..."
            echo "::set-output name=sarif_file::yamllint-report.json"
          fi
          
          if echo "$languages" | grep -q "Go"; then
            echo "Uploading GoLint results..."
            echo "::set-output name=sarif_file::golint-report.json"
          fi
          
          if echo "$languages" | grep -q "Java"; then
            echo "Uploading Checkstyle results..."
            echo "::set-output name=sarif_file::checkstyle-report.json"
          fi
          
          if echo "$languages" | grep -q "PHP"; then
            echo "Uploading PHPCS results..."
            echo "::set-output name=sarif_file::phpcs-report.json"
          fi
          
          if echo "$languages" | grep -q "Ruby"; then
            echo "Uploading RuboCop results..."
            echo "::set-output name=sarif_file::rubocop-report.json"
          fi
          
          if echo "$languages" | grep -q "C#"; then
            echo "Uploading Dotnet Format results..."
            echo "::set-output name=sarif_file::dotnet-format-report.json"
          fi
          
          if echo "$languages" | grep -q "Rust"; then
            echo "Uploading Clippy results..."
            echo "::set-output name=sarif_file::clippy-report.json"
          fi
          
          if echo "$languages" | grep -q "Markdown"; then
            echo "Uploading MarkdownLint results..."
            echo "::set-output name=sarif_file::markdownlint-report.json"
          fi
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.upload-results.outputs.sarif_file }}

  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies and run coverage
        run: |
          if [ -f package.json ]; then
            npm install
            npm run coverage
          else
            echo "No package.json found, skipping npm install and coverage."
          fi

  create-pull-request:
    name: Create or Update Pull Request
    runs-on: ubuntu-latest
    needs: [lint, coverage]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "Auto-generated update by GitHub Action"
          branch: update-dependencies
          title: "Dependency Update"
          body: "This PR updates dependencies to their latest versions."

  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          else
            echo "No package.json found, skipping npm install."
          fi

      - name: Check for outdated dependencies
        run: |
          if [ -f package.json ]; then
            npm outdated
          else
            echo "No package.json found, skipping npm outdated."
          fi

      - name: Update dependencies
        run: |
          if [ -f package.json ]; then
            npm update
          else
            echo "No package.json found, skipping npm update."
          fi

      - name: Commit and push updates
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git checkout -b update-dependencies
          if [ -f package.json ]; then
            npm install
            npm update
            git commit -am "Update dependencies"
            git push origin update-dependencies
          else
            echo "No package.json found, skipping dependency update commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        if: ${{ steps.commit-push.outputs.commit != '' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update dependencies"
          branch: update-dependencies
          base: main
          title: "Dependency updates"
          body: "This PR updates the dependencies to their latest versions."

