name: Anti Code Scanner

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

jobs:
  detect-languages:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect.outputs.languages }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Linguist
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-full
          sudo gem install github-linguist

      - name: Detect languages
        id: detect
        run: |
          languages=$(github-linguist --breakdown | awk 'BEGIN { FS=": " } /^ {2}[A-Za-z]+: / { print $1 }' | sed 's/^ *//g' | paste -sd "," -)
          echo "languages=$languages" >> $GITHUB_ENV
          echo "languages=$languages" >> $GITHUB_OUTPUT
          
  lint:
    needs: detect-languages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python (Linux/macOS)
        if: runner.os != 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Python (Windows)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Set languages variable
        run: echo "languages=${{ needs.detect-languages.outputs.languages }}" >> $GITHUB_ENV

      - name: Check for large log files (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          find . -name "*.log" -size +1M -exec echo "::error file={}::Log file is larger than 1MB" \;

      - name: Check for large log files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-ChildItem -Path . -Recurse -Filter *.log | Where-Object { $_.Length -gt 1MB } | ForEach-Object { Write-Error "Log file $($_.FullName) is larger than 1MB" }

      - name: Set up environments and run linters (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          languages="${{ env.languages }}"
          echo "Detected languages: $languages"

          if [[ "$languages" == *"JavaScript"* ]]; then
            echo "Setting up Node.js environment and running ESLint..."
            npm install
            npm install eslint
            npx eslint . | tee eslint-report.txt
            eslint_failed=$?
            if [ $eslint_failed -ne 0 ]; then
              echo "::error file=eslint-report.txt::ESLint found issues"
            fi
          fi

          if [[ "$languages" == *"Python"* ]]; then
            echo "Setting up Python environment and running Bandit and Flake8..."
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
            pip install bandit flake8

            echo "Running Bandit..."
            bandit -r . | tee bandit-report.txt
            bandit_failed=$?
            if [ $bandit_failed -ne 0 ]; then
              echo "::error file=bandit-report.txt::Bandit found issues"
            fi

            echo "Running Flake8..."
            flake8 . | tee flake8-report.txt
            flake8_failed=$?
            if [ $flake8_failed -ne 0 ]; then
              echo "::error file=flake8-report.txt::Flake8 found issues"
            fi
          fi

          if [[ "$languages" == *"YAML"* ]]; then
            echo "Installing YAMLLint and running it..."
            sudo apt-get update
            sudo apt-get install -y yamllint
            yamllint . | tee yamllint-report.txt
            yamllint_failed=$?
            if [ $yamllint_failed -ne 0 ]; then
              echo "::error file=yamllint-report.txt::YAMLLint found issues"
            fi
          fi

      - name: Set up environments and run linters (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $languages = "${{ env.languages }}"
          Write-Host "Detected languages: $languages"

          if ($languages -match "JavaScript") {
            Write-Host "Setting up Node.js environment and running ESLint..."
            npm install
            npm install eslint
            npx eslint . | Tee-Object -FilePath eslint-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "ESLint found issues"
            }
          }

          if ($languages -match "Python") {
            Write-Host "Setting up Python environment and running Bandit and Flake8..."
            python -m pip install --upgrade pip
            if (Test-Path requirements.txt) { pip install -r requirements.txt }
            pip install bandit flake8

            Write-Host "Running Bandit..."
            bandit -r . | Tee-Object -FilePath bandit-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Bandit found issues"
            }

            Write-Host "Running Flake8..."
            flake8 . | Tee-Object -FilePath flake8-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Flake8 found issues"
            }
          }

          if ($languages -match "YAML") {
            Write-Host "Installing YAMLLint and running it..."
            winget install yamllint
            yamllint . | Tee-Object -FilePath yamllint-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "YAMLLint found issues"
            }
          }

          if ($languages -match "Go") {
            Write-Host "Setting up Go environment and running GoLint..."
            go install golang.org/x/lint/golint@latest
            golint ./... | Tee-Object -FilePath golint-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "GoLint found issues"
            }
          }

          if ($languages -match "Java") {
            Write-Host "Setting up Java environment and running Checkstyle..."
            curl -LJO https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.41.1/checkstyle-8.41.1-all.jar
            java -jar checkstyle-8.41.1-all.jar -c /google_checks.xml src | Tee-Object -FilePath checkstyle-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Checkstyle found issues"
            }
          }

          if ($languages -match "PHP") {
            Write-Host "Setting up PHP environment and running PHPCS..."
            composer global require "squizlabs/php_codesniffer=*"
            ~/.composer/vendor/bin/phpcs --standard=PSR2 src/ | Tee-Object -FilePath phpcs-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "PHPCS found issues"
            }
          }

          if ($languages -match "Ruby") {
            Write-Host "Setting up Ruby environment and running RuboCop..."
            gem install rubocop
            rubocop | Tee-Object -FilePath rubocop-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "RuboCop found issues"
            }
          }

          if ($languages -match "C#") {
            Write-Host "Setting up .NET environment and running Dotnet Format..."
            dotnet tool install -g dotnet-format
            dotnet format | Tee-Object -FilePath dotnet-format-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Dotnet Format found issues"
            }
          }

          if ($languages -match "Rust") {
            Write-Host "Setting up Rust environment and running Clippy..."
            rustup component add clippy
            cargo clippy --all-targets --all-features -- -D warnings | Tee-Object -FilePath clippy-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Clippy found issues"
            }
          }

          if ($languages -match "Markdown") {
            Write-Host "Installing MarkdownLint and running it..."
            sudo apt-get update
            sudo apt-get install -y npm
            npm install -g markdownlint-cli
            markdownlint "**/*.md" | Tee-Object -FilePath markdownlint-report.txt
            if ($LASTEXITCODE -ne 0) {
              Write-Error "MarkdownLint found issues"
            }
          }

      - name: Upload ESLint report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'JavaScript')
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: eslint-report.txt

      - name: Upload Bandit report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Python')
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.txt

      - name: Upload Flake8 report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Python')
        uses: actions/upload-artifact@v3
        with:
          name: flake8-report
          path: flake8-report.txt

      - name: Upload YAMLLint report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'YAML')
        uses: actions/upload-artifact@v3
        with:
          name: yamllint-report
          path: yamllint-report.txt

      - name: Upload GoLint report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Go')
        uses: actions/upload-artifact@v3
        with:
          name: golint-report
          path: golint-report.txt

      - name: Upload Checkstyle report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Java')
        uses: actions/upload-artifact@v3
        with:
          name: checkstyle-report
          path: checkstyle-report.txt

      - name: Upload PHPCS report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'PHP')
        uses: actions/upload-artifact@v3
        with:
          name: phpcs-report
          path: phpcs-report.txt

      - name: Upload RuboCop report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Ruby')
        uses: actions/upload-artifact@v3
        with:
          name: rubocop-report
          path: rubocop-report.txt

      - name: Upload Dotnet Format report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'C#')
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-format-report
          path: dotnet-format-report.txt

      - name: Upload Clippy report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Rust')
        uses: actions/upload-artifact@v3
        with:
          name: clippy-report
          path: clippy-report.txt

      - name: Upload MarkdownLint report
        if: failure() && contains(needs.detect-languages.outputs.languages, 'Markdown')
        uses: actions/upload-artifact@v3
        with:
          name: markdownlint-report
          path: markdownlint-report.txt

  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies and run coverage
      run: |
        if [ -f package.json ]; then
          npm install
          npm run coverage
          coverage_failed=$?
          if [ $coverage_failed -ne 0 ]; then
            echo "::error::Code coverage analysis found issues"
          fi
        else
          echo "No package.json found, skipping npm install and coverage."
        fi

    - name: Upload coverage report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/

  create-pull-request:
    name: Create or Update Pull Request
    runs-on: ubuntu-latest
    needs: [lint, coverage]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Configure git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Auto-generated update by GitHub Action"
        branch: update-dependencies
        title: "Dependency Update"
        body: "This PR updates dependencies to their latest versions."

  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        else
          echo "No package.json found, skipping npm install."
        fi

    - name: Check for outdated dependencies
      run: |
        if [ -f package.json ]; then
          npm outdated
        else
          echo "No package.json found, skipping npm outdated."
        fi

    - name: Update dependencies
      run: |
        if [ -f package.json ]; then
          npm update
        else
          echo "No package.json found, skipping npm update."
        fi

    - name: Commit and push updates
      id: commit-push
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git checkout -b update-dependencies
        if [ -f package.json ]; then
          git commit -am "Update dependencies"
          git push origin update-dependencies
        else
          echo "No package.json found, skipping dependency update commit."
        fi

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      if: steps.commit-push.outputs.commit != ''
      with:
        token: ${{ secrets.MY_TOKEN }}
        commit-message: "Update dependencies"
        branch: update-dependencies
        base: main
        title: "Dependency updates"
        body: "This PR updates the dependencies to their latest versions."
