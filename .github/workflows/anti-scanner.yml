name: Anti Code Scanner

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-languages:
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect.outputs.languages }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Linguist
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full
        gem install github-linguist

    - name: Detect languages
      id: detect
      run: |
        languages=$(github-linguist --breakdown | awk 'BEGIN { FS=": " } /^ {2}[A-Za-z]+: / { print $1 }' | sed 's/^ *//g' | paste -sd "," -)
        echo "Detected languages: $languages"
        echo "::set-output name=languages::$languages"

  lint:
    needs: detect-languages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up environment and run linters
      run: |
        languages="${{ needs.detect-languages.outputs.languages }}"
        echo "Detected languages: $languages"

        # JavaScript setup and linter
        if [[ "$languages" == *"JavaScript"* ]]; then
          echo "Setting up Node.js environment"
          actions/setup-node@v3 node-version=16
          npm install
          npm install eslint
          npx eslint .
        fi

        # Python setup and linter
        if [[ "$languages" == *"Python"* ]]; then
          echo "Setting up Python environment"
          actions/setup-python@v4 python-version=3.9
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install bandit
          bandit -r .
        fi

        # Shell setup and linter
        if [[ "$languages" == *"Shell"* ]]; then
          echo "Installing ShellCheck"
          sudo apt-get install -y shellcheck
          shellcheck **/*.sh
        fi

        # YAML setup and linter
        if [[ "$languages" == *"YAML"* ]]; then
          echo "Installing YAMLLint"
          sudo apt-get install -y yamllint
          yamllint .
        fi

        # Go setup and linter
        if [[ "$languages" == *"Go"* ]]; then
          echo "Setting up Go environment"
          actions/setup-go@v4 go-version=1.16
          go install golang.org/x/lint/golint@latest
          golint ./...
        fi

        # Java setup and linter
        if [[ "$languages" == *"Java"* ]]; then
          echo "Setting up Java environment"
          actions/setup-java@v3 java-version=11
          curl -LJO https://github.com/checkstyle/checkstyle/releases/download/checkstyle-8.41.1/checkstyle-8.41.1-all.jar
          java -jar checkstyle-8.41.1-all.jar -c /google_checks.xml src
        fi

        # PHP setup and linter
        if [[ "$languages" == *"PHP"* ]]; then
          echo "Setting up PHP environment"
          shivammathur/setup-php@v2 php-version=7.4
          composer global require "squizlabs/php_codesniffer=*"
          ~/.composer/vendor/bin/phpcs --standard=PSR2 src/
        fi

        # Ruby setup and linter
        if [[ "$languages" == *"Ruby"* ]]; then
          echo "Setting up Ruby environment"
          actions/setup-ruby@v1 ruby-version=2.7
          gem install rubocop
          rubocop
        fi

        # C# setup and linter
        if [[ "$languages" == *"C#"* ]]; then
          echo "Setting up .NET environment"
          actions/setup-dotnet@v3 dotnet-version=5.0.x
          dotnet tool install -g dotnet-format
          dotnet format
        fi

        # Rust setup and linter
        if [[ "$languages" == *"Rust"* ]]; then
          echo "Setting up Rust environment"
          actions-rs/toolchain@v1 toolchain=stable
          rustup component add clippy
          cargo clippy --all-targets --all-features -- -D warnings
        fi

  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Run tests and collect coverage
      run: npm run test -- --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Trivy to scan for vulnerabilities
      uses: aquasecurity/trivy-action@v0.2.1
      with:
        scan-type: 'fs'
        ignore-unfixed: true

  dependency-update:
    name: Dependency Updates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Check for outdated dependencies
      run: npm outdated
